// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct MatrixOutputPB {
    // message fields
    status: ::protobuf::SingularField<::std::string::String>,
    pub rows: ::protobuf::RepeatedField<MatrixOutputPB_MatrixRow>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatrixOutputPB {
    fn default() -> &'a MatrixOutputPB {
        <MatrixOutputPB as ::protobuf::Message>::default_instance()
    }
}

impl MatrixOutputPB {
    pub fn new() -> MatrixOutputPB {
        ::std::default::Default::default()
    }

    // required string status = 1;


    pub fn get_status(&self) -> &str {
        match self.status.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        self.status.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .matrix.MatrixOutputPB.MatrixRow rows = 2;


    pub fn get_rows(&self) -> &[MatrixOutputPB_MatrixRow] {
        &self.rows
    }
    pub fn clear_rows(&mut self) {
        self.rows.clear();
    }

    // Param is passed by value, moved
    pub fn set_rows(&mut self, v: ::protobuf::RepeatedField<MatrixOutputPB_MatrixRow>) {
        self.rows = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rows(&mut self) -> &mut ::protobuf::RepeatedField<MatrixOutputPB_MatrixRow> {
        &mut self.rows
    }

    // Take field
    pub fn take_rows(&mut self) -> ::protobuf::RepeatedField<MatrixOutputPB_MatrixRow> {
        ::std::mem::replace(&mut self.rows, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MatrixOutputPB {
    fn is_initialized(&self) -> bool {
        if self.status.is_none() {
            return false;
        }
        for v in &self.rows {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rows)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.status.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.rows {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.status.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.rows {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatrixOutputPB {
        MatrixOutputPB::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &MatrixOutputPB| { &m.status },
                |m: &mut MatrixOutputPB| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MatrixOutputPB_MatrixRow>>(
                "rows",
                |m: &MatrixOutputPB| { &m.rows },
                |m: &mut MatrixOutputPB| { &mut m.rows },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatrixOutputPB>(
                "MatrixOutputPB",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatrixOutputPB {
        static instance: ::protobuf::rt::LazyV2<MatrixOutputPB> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatrixOutputPB::new)
    }
}

impl ::protobuf::Clear for MatrixOutputPB {
    fn clear(&mut self) {
        self.status.clear();
        self.rows.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatrixOutputPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatrixOutputPB {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MatrixOutputPB_IntValue {
    // message fields
    value: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatrixOutputPB_IntValue {
    fn default() -> &'a MatrixOutputPB_IntValue {
        <MatrixOutputPB_IntValue as ::protobuf::Message>::default_instance()
    }
}

impl MatrixOutputPB_IntValue {
    pub fn new() -> MatrixOutputPB_IntValue {
        ::std::default::Default::default()
    }

    // required uint64 value = 1;


    pub fn get_value(&self) -> u64 {
        self.value.unwrap_or(0)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u64) {
        self.value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for MatrixOutputPB_IntValue {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatrixOutputPB_IntValue {
        MatrixOutputPB_IntValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "value",
                |m: &MatrixOutputPB_IntValue| { &m.value },
                |m: &mut MatrixOutputPB_IntValue| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatrixOutputPB_IntValue>(
                "MatrixOutputPB.IntValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatrixOutputPB_IntValue {
        static instance: ::protobuf::rt::LazyV2<MatrixOutputPB_IntValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatrixOutputPB_IntValue::new)
    }
}

impl ::protobuf::Clear for MatrixOutputPB_IntValue {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatrixOutputPB_IntValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatrixOutputPB_IntValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MatrixOutputPB_MatrixElement {
    // message fields
    pub duration: ::protobuf::SingularPtrField<MatrixOutputPB_IntValue>,
    pub distance: ::protobuf::SingularPtrField<MatrixOutputPB_IntValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatrixOutputPB_MatrixElement {
    fn default() -> &'a MatrixOutputPB_MatrixElement {
        <MatrixOutputPB_MatrixElement as ::protobuf::Message>::default_instance()
    }
}

impl MatrixOutputPB_MatrixElement {
    pub fn new() -> MatrixOutputPB_MatrixElement {
        ::std::default::Default::default()
    }

    // required .matrix.MatrixOutputPB.IntValue duration = 1;


    pub fn get_duration(&self) -> &MatrixOutputPB_IntValue {
        self.duration.as_ref().unwrap_or_else(|| <MatrixOutputPB_IntValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_duration(&mut self) {
        self.duration.clear();
    }

    pub fn has_duration(&self) -> bool {
        self.duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: MatrixOutputPB_IntValue) {
        self.duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_duration(&mut self) -> &mut MatrixOutputPB_IntValue {
        if self.duration.is_none() {
            self.duration.set_default();
        }
        self.duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_duration(&mut self) -> MatrixOutputPB_IntValue {
        self.duration.take().unwrap_or_else(|| MatrixOutputPB_IntValue::new())
    }

    // required .matrix.MatrixOutputPB.IntValue distance = 2;


    pub fn get_distance(&self) -> &MatrixOutputPB_IntValue {
        self.distance.as_ref().unwrap_or_else(|| <MatrixOutputPB_IntValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_distance(&mut self) {
        self.distance.clear();
    }

    pub fn has_distance(&self) -> bool {
        self.distance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_distance(&mut self, v: MatrixOutputPB_IntValue) {
        self.distance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_distance(&mut self) -> &mut MatrixOutputPB_IntValue {
        if self.distance.is_none() {
            self.distance.set_default();
        }
        self.distance.as_mut().unwrap()
    }

    // Take field
    pub fn take_distance(&mut self) -> MatrixOutputPB_IntValue {
        self.distance.take().unwrap_or_else(|| MatrixOutputPB_IntValue::new())
    }
}

impl ::protobuf::Message for MatrixOutputPB_MatrixElement {
    fn is_initialized(&self) -> bool {
        if self.duration.is_none() {
            return false;
        }
        if self.distance.is_none() {
            return false;
        }
        for v in &self.duration {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.distance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.duration)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.distance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.distance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.duration.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.distance.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatrixOutputPB_MatrixElement {
        MatrixOutputPB_MatrixElement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MatrixOutputPB_IntValue>>(
                "duration",
                |m: &MatrixOutputPB_MatrixElement| { &m.duration },
                |m: &mut MatrixOutputPB_MatrixElement| { &mut m.duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MatrixOutputPB_IntValue>>(
                "distance",
                |m: &MatrixOutputPB_MatrixElement| { &m.distance },
                |m: &mut MatrixOutputPB_MatrixElement| { &mut m.distance },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatrixOutputPB_MatrixElement>(
                "MatrixOutputPB.MatrixElement",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatrixOutputPB_MatrixElement {
        static instance: ::protobuf::rt::LazyV2<MatrixOutputPB_MatrixElement> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatrixOutputPB_MatrixElement::new)
    }
}

impl ::protobuf::Clear for MatrixOutputPB_MatrixElement {
    fn clear(&mut self) {
        self.duration.clear();
        self.distance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatrixOutputPB_MatrixElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatrixOutputPB_MatrixElement {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MatrixOutputPB_MatrixRow {
    // message fields
    pub elements: ::protobuf::RepeatedField<MatrixOutputPB_MatrixElement>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatrixOutputPB_MatrixRow {
    fn default() -> &'a MatrixOutputPB_MatrixRow {
        <MatrixOutputPB_MatrixRow as ::protobuf::Message>::default_instance()
    }
}

impl MatrixOutputPB_MatrixRow {
    pub fn new() -> MatrixOutputPB_MatrixRow {
        ::std::default::Default::default()
    }

    // repeated .matrix.MatrixOutputPB.MatrixElement elements = 1;


    pub fn get_elements(&self) -> &[MatrixOutputPB_MatrixElement] {
        &self.elements
    }
    pub fn clear_elements(&mut self) {
        self.elements.clear();
    }

    // Param is passed by value, moved
    pub fn set_elements(&mut self, v: ::protobuf::RepeatedField<MatrixOutputPB_MatrixElement>) {
        self.elements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elements(&mut self) -> &mut ::protobuf::RepeatedField<MatrixOutputPB_MatrixElement> {
        &mut self.elements
    }

    // Take field
    pub fn take_elements(&mut self) -> ::protobuf::RepeatedField<MatrixOutputPB_MatrixElement> {
        ::std::mem::replace(&mut self.elements, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MatrixOutputPB_MatrixRow {
    fn is_initialized(&self) -> bool {
        for v in &self.elements {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.elements)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elements {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatrixOutputPB_MatrixRow {
        MatrixOutputPB_MatrixRow::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MatrixOutputPB_MatrixElement>>(
                "elements",
                |m: &MatrixOutputPB_MatrixRow| { &m.elements },
                |m: &mut MatrixOutputPB_MatrixRow| { &mut m.elements },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatrixOutputPB_MatrixRow>(
                "MatrixOutputPB.MatrixRow",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatrixOutputPB_MatrixRow {
        static instance: ::protobuf::rt::LazyV2<MatrixOutputPB_MatrixRow> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatrixOutputPB_MatrixRow::new)
    }
}

impl ::protobuf::Clear for MatrixOutputPB_MatrixRow {
    fn clear(&mut self) {
        self.elements.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatrixOutputPB_MatrixRow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatrixOutputPB_MatrixRow {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cprotos.proto\x12\x06matrix\"\xef\x02\n\x0eMatrixOutputPB\x12\x18\n\
    \x06status\x18\x01\x20\x02(\tR\x06statusB\0\x126\n\x04rows\x18\x02\x20\
    \x03(\x0b2\x20.matrix.MatrixOutputPB.MatrixRowR\x04rowsB\0\x1a$\n\x08Int\
    Value\x12\x16\n\x05value\x18\x01\x20\x02(\x04R\x05valueB\0:\0\x1a\x8f\
    \x01\n\rMatrixElement\x12=\n\x08duration\x18\x01\x20\x02(\x0b2\x1f.matri\
    x.MatrixOutputPB.IntValueR\x08durationB\0\x12=\n\x08distance\x18\x02\x20\
    \x02(\x0b2\x1f.matrix.MatrixOutputPB.IntValueR\x08distanceB\0:\0\x1aQ\n\
    \tMatrixRow\x12B\n\x08elements\x18\x01\x20\x03(\x0b2$.matrix.MatrixOutpu\
    tPB.MatrixElementR\x08elementsB\0:\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
