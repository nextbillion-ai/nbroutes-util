{"openapi":"3.0.0","info":{"title":"NBAI Map API","version":"0.1.0"},"paths":{"/directions/json":{"get":{"summary":"Directions Json Handler","parameters":[{"in":"query","name":"altcount","description":"number of alternative routes to return.\n\nDefault: `1` if `alternatives` is disabled, `3` otherwise","schema":{"type":"integer","format":"int32"},"style":"form"},{"in":"query","name":"alternatives","description":"enable to return alternative routes.\n\nNote: `altcount` will default to `3` if this is enabled.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"annotations","description":"`deprecated`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"avoid","description":"Indicates that the calculated route(s) should avoid the indicated features. \n\nFormat: `value1|value2|...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"bearings","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"context","description":"`deprecated`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"debug","description":"enable to show debug information.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"departure_time","description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`","schema":{"type":"integer","format":"int64"},"style":"form"},{"in":"query","name":"destination","description":"location of destination.\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","required":true,"schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry","description":"output format of geometry.\n\nDefault: `polyline`","schema":{"type":"string","enum":["polyline","polyline6","geojson"]},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"origin","description":"{{location_of_origin}}\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","required":true,"schema":{"type":"string"},"style":"form"},{"in":"query","name":"overview","description":"output verbosity of overview (whole trip) geometry.\n\nDefault: `full`","schema":{"type":"string","enum":["full","simplified","false"]},"style":"form"},{"in":"query","name":"session","description":"unique session id for trip identification.\n\nNote: Help to reuse cached trip characteritics when set. \n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"special_object_types","description":"special geospatial objects to include in response.\n\nFormat: `type1,type2,...`.\n\nDefault:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"steps","description":"enable to include `steps` in response.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"truck_size","description":"Indicates the truck size in CM, only valid when mode=6w. \n\nFormat: `height,width,length`.","schema":{"type":"string"},"style":"form"},{"in":"query","name":"truck_weight","description":"Indicates the truck weight including trailers and shipped goods in KG, only valid when mode=6w.","schema":{"type":"integer","format":"int32"},"style":"form"},{"in":"query","name":"waypoints","description":"location(s) of waypoint(s) along the trip.\n\nFormat: `lat0,lng0|lat1,lng1|...`.\n\nRegex: (^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$)","schema":{"type":"string"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DirectionsOutput"}}}}}},"post":{"summary":"Directions JSON POST Handler","parameters":[{"in":"query","name":"key","schema":{"type":"string"},"style":"form"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DirectionsInput"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DirectionsOutput"}}}}}}},"/distancematrix/json":{"get":{"summary":"DistanceMatrix JSON Handler","parameters":[{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"avoid","schema":{"type":"string"},"style":"form"},{"in":"query","name":"bearings","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"context","description":"`deprecated`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"debug","description":"enable to show debug information.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"departure_time","description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`","schema":{"type":"integer","format":"int64"},"style":"form"},{"in":"query","name":"destinations","description":"locations of destinations\n\nFormat: lat0,lng0|lat1,lng1|...\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","required":true,"schema":{"type":"string"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"origins","description":"locations of origins \n\nFormat: lat0,lng0|lat1,lng1|...\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","required":true,"schema":{"type":"string"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MatrixOutput"}}}}}},"post":{"summary":"DistanceMatrix JSON POST Handler","parameters":[{"in":"query","name":"key","schema":{"type":"string"},"style":"form"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MatrixInput"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MatrixOutput"}}}}}}},"/distancematrix/json-concise":{"get":{"summary":"DistanceMatrix JSON Handler","parameters":[{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"avoid","schema":{"type":"string"},"style":"form"},{"in":"query","name":"bearings","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"context","description":"`deprecated`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"debug","description":"enable to show debug information.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"departure_time","description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`","schema":{"type":"integer","format":"int64"},"style":"form"},{"in":"query","name":"destinations","description":"locations of destinations\n\nFormat: lat0,lng0|lat1,lng1|...\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","required":true,"schema":{"type":"string"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"origins","description":"locations of origins \n\nFormat: lat0,lng0|lat1,lng1|...\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","required":true,"schema":{"type":"string"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MatrixConciseOutput"}}}}}},"post":{"summary":"DistanceMatrixConcise JSON POST Handler","parameters":[{"in":"query","name":"key","schema":{"type":"string"},"style":"form"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MatrixInput"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MatrixConciseOutput"}}}}}}},"/isochrone/json":{"get":{"summary":"Isochrone JSON Handler","parameters":[{"in":"query","name":"contours_colors","schema":{"type":"string"},"style":"form"},{"in":"query","name":"contours_meters","schema":{"type":"string"},"style":"form"},{"in":"query","name":"contours_minutes","schema":{"type":"string"},"style":"form"},{"in":"query","name":"coordinates","description":"center to the isochrone lines.","required":true,"schema":{"type":"string"},"style":"form"},{"in":"query","name":"denoise","schema":{"type":"number","format":"float"},"style":"form"},{"in":"query","name":"departure_time","description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`","schema":{"type":"integer","format":"int64"},"style":"form"},{"in":"query","name":"generalize","schema":{"type":"number","format":"float"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car`.\n\nDefault: `\"4w\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"polygons","schema":{"type":"boolean"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ISOChroneValhallaOutput"}}}}}}},"/navigating/json":{"get":{"summary":"Navigation Json Handler","parameters":[{"in":"query","name":"altcount","description":"number of alternative routes to return.\n\nDefault: `1` if `alternatives` is disabled, `3` otherwise","schema":{"type":"integer","format":"int32"},"style":"form"},{"in":"query","name":"alternatives","description":"enable to return alternative routes.\n\nNote: `altcount` will default to `3` if this is enabled.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"avoid","description":"Indicates that the calculated route(s) should avoid the indicated features. \n\nFormat: `value1|value2|...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"bearings","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"context","description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`\n`deprecated`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"debug","description":"enable to show debug information.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"departure_time","schema":{"type":"integer","format":"int64"},"style":"form"},{"in":"query","name":"destination","description":"location of destination.\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry","description":"geometry input, if this is given, other params will not be considered except `geometry_type` & `lang` & `key`.","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry_type","description":"format of geometry.\n\nDefault: `polyline6`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"lang","description":"language of the text instruction","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"origin","description":"{{location_of_origin}}\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"overview","description":"output verbosity of overview (whole trip) geometry.\n\nDefault: `full`","schema":{"type":"string","enum":["full","simplified","false"]},"style":"form"},{"in":"query","name":"route_type","description":"using shortest route when route_type=shortest.","schema":{"type":"string"},"style":"form"},{"in":"query","name":"session","description":"unique session id for trip identification.\n\nNote: Help to reuse cached trip characteritics when set. \n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"waypoints","description":"location(s) of waypoint(s) along the trip.\n\nFormat: `lat0,lng0|lat1,lng1|...`.\n\nRegex: (^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$)","schema":{"type":"string"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NavigatingOutput"}}}}}},"post":{"summary":"Navigation Json Handler","parameters":[{"in":"query","name":"key","schema":{"type":"string"},"style":"form"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NavigatingInput"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NavigatingOutput"}}}}}}},"/navigatingmsg/json":{"get":{"summary":"Navigation Msg Json Handler","parameters":[{"in":"query","name":"altcount","description":"number of alternative routes to return.\n\nDefault: `1` if `alternatives` is disabled, `3` otherwise","schema":{"type":"integer","format":"int32"},"style":"form"},{"in":"query","name":"alternatives","description":"enable to return alternative routes.\n\nNote: `altcount` will default to `3` if this is enabled.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"avoid","description":"Indicates that the calculated route(s) should avoid the indicated features. \n\nFormat: `value1|value2|...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"bearings","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"context","description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`\n`deprecated`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"debug","description":"enable to show debug information.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"departure_time","schema":{"type":"integer","format":"int64"},"style":"form"},{"in":"query","name":"destination","description":"location of destination.\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry","description":"geometry input, if this is given, other params will not be considered except `geometry_type` & `lang` & `key`.","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry_type","description":"format of geometry.\n\nDefault: `polyline6`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"lang","description":"language of the text instruction","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"origin","description":"{{location_of_origin}}\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"overview","description":"output verbosity of overview (whole trip) geometry.\n\nDefault: `full`","schema":{"type":"string","enum":["full","simplified","false"]},"style":"form"},{"in":"query","name":"route_type","description":"using shortest route when route_type=shortest.","schema":{"type":"string"},"style":"form"},{"in":"query","name":"session","description":"unique session id for trip identification.\n\nNote: Help to reuse cached trip characteritics when set. \n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"waypoints","description":"location(s) of waypoint(s) along the trip.\n\nFormat: `lat0,lng0|lat1,lng1|...`.\n\nRegex: (^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$)","schema":{"type":"string"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NavigatingProctorOutput"}}}}}}},"/navigation/json":{"get":{"summary":"Navigation Json Handler","parameters":[{"in":"query","name":"altcount","description":"number of alternative routes to return.\n\nDefault: `1` if `alternatives` is disabled, `3` otherwise","schema":{"type":"integer","format":"int32"},"style":"form"},{"in":"query","name":"alternatives","description":"enable to return alternative routes.\n\nNote: `altcount` will default to `3` if this is enabled.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"avoid","description":"Indicates that the calculated route(s) should avoid the indicated features. \n\nFormat: `value1|value2|...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"bearings","description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"context","description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`\n`deprecated`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"debug","description":"enable to show debug information.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"departure_time","schema":{"type":"integer","format":"int64"},"style":"form"},{"in":"query","name":"destination","description":"location of destination.\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry","description":"geometry input, if this is given, other params will not be considered except `geometry_type` & `lang` & `key`.","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry_type","description":"format of geometry.\n\nDefault: `polyline6`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"lang","description":"language of the text instruction","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"origin","description":"{{location_of_origin}}\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"overview","description":"output verbosity of overview (whole trip) geometry.\n\nDefault: `full`","schema":{"type":"string","enum":["full","simplified","false"]},"style":"form"},{"in":"query","name":"route_type","description":"using shortest route when route_type=shortest.","schema":{"type":"string"},"style":"form"},{"in":"query","name":"session","description":"unique session id for trip identification.\n\nNote: Help to reuse cached trip characteritics when set. \n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"waypoints","description":"location(s) of waypoint(s) along the trip.\n\nFormat: `lat0,lng0|lat1,lng1|...`.\n\nRegex: (^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$)","schema":{"type":"string"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NavigatingOutput"}}}}}},"post":{"summary":"Navigation Json Handler","parameters":[{"in":"query","name":"key","schema":{"type":"string"},"style":"form"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NavigatingInput"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NavigatingOutput"}}}}}}},"/optimization/json":{"get":{"summary":"Optimization Json Handler","parameters":[{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"coordinates","description":"A semicolon-separated list of {lat},{lng}.\n\nFormat: `lat0,lng0|lat1,lng1|...`.\n\nRegex: (^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$)","required":true,"schema":{"type":"string"},"style":"form"},{"in":"query","name":"destination","description":"Specify the destination coordinate of the returned route.\n\nValues: `any|last`.\n\nDefault: `any`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometries","description":"output format of geometry.\n\nValue: `geojson|polyline|polyline6`.\n\nDefault: `polyline6`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","description":"mode of service.\n\nValues:`car`.\n\nDefault: `\"car\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"roundtrip","description":"Indicates whether the returned route is roundtrip.\n\nDefault: `true`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"source","description":"The coordinate at which to start the returned route.\n\nValues: `any|first`.\n\nDefault: `first`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"with_geometry","description":"Indicates whether the return geometry.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OptimizationOutput"}}}}}}},"/postTripRoute":{"post":{"summary":"Post Trip Route Json Handler","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostTripRouteInput"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostTripRouteOutput"}}}}}}},"/snapToRoads/json":{"get":{"summary":"SnapToRoads Json Handler","parameters":[{"in":"query","name":"approaches","schema":{"type":"string"},"style":"form"},{"in":"query","name":"avoid","schema":{"type":"string"},"style":"form"},{"in":"query","name":"context","description":"`deprecated`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"geometry","description":"only supports for polyline and geojson","schema":{"type":"string"},"style":"form"},{"in":"query","name":"interpolate","description":"enable to interpolate the path.\n\nNote: might return more points\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"},{"in":"query","name":"key","description":"apikey for authentication.\n\nDefault: `\"\"`","schema":{"type":"string"},"style":"form"},{"in":"query","name":"mode","schema":{"type":"string"},"style":"form"},{"in":"query","name":"path","description":"`locations` to perform `snap2roads`\n\nFormat: `lat0,lng0|lat1,lng1|...`\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","required":true,"schema":{"type":"string"},"style":"form"},{"in":"query","name":"radiuses","description":"radiuses of each `location` for performing `snap2road`\n\nUnit: `meters`\n\nFormat: `radius0|radius1|...`\n\nRegex: ^[\\d]+(\\|[\\d]+)*$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"timestamps","description":"unix timestamps for each `location`. Need to be monotonically increasing.\n\nUnit: `seconds`\n\nFormat: ts0|ts1|...\n\nRegex: ^[\\d]+(\\|[\\d]+)*$","schema":{"type":"string"},"style":"form"},{"in":"query","name":"tolerate_outlier","description":"enable to ignore location not found in service boundary.\n\nNote: enable this to ignore outliers, otherwise an error will be thrown.\n\nDefault: `false`","schema":{"type":"boolean"},"style":"form"}],"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SnapOutput"}}}}}},"post":{"summary":"SnapToRoads JSON POST Handler","parameters":[{"in":"query","name":"key","schema":{"type":"string"},"style":"form"}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SnapInput"}}},"required":true},"responses":{"200":{"description":"OK","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SnapOutput"}}}}}}}},"components":{"schemas":{"DirectionsInput":{"type":"object","properties":{"altcount":{"description":"number of alternative routes to return.\n\nDefault: `1` if `alternatives` is disabled, `3` otherwise","type":"integer","format":"int32"},"alternatives":{"description":"enable to return alternative routes.\n\nNote: `altcount` will default to `3` if this is enabled.\n\nDefault: `false`","type":"boolean"},"annotations":{"description":"`deprecated`","type":"boolean"},"approaches":{"type":"string"},"avoid":{"description":"Indicates that the calculated route(s) should avoid the indicated features. \n\nFormat: `value1|value2|...`. Default:`\"\"`","type":"string"},"bearings":{"description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","type":"string"},"context":{"description":"`deprecated`","type":"string"},"debug":{"description":"enable to show debug information.\n\nDefault: `false`","type":"boolean"},"departure_time":{"description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`","type":"integer","format":"int64"},"destination":{"description":"location of destination.\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","type":"string"},"geometry":{"description":"output format of geometry.\n\nDefault: `polyline`","type":"string","enum":["polyline","polyline6","geojson"]},"key":{"description":"apikey for authentication.\n\nDefault: `\"\"`","type":"string"},"mode":{"description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","type":"string"},"origin":{"description":"{{location_of_origin}}\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","type":"string"},"overview":{"description":"output verbosity of overview (whole trip) geometry.\n\nDefault: `full`","type":"string","enum":["full","simplified","false"]},"session":{"description":"unique session id for trip identification.\n\nNote: Help to reuse cached trip characteritics when set. \n\nDefault: `\"\"`","type":"string"},"special_object_types":{"description":"special geospatial objects to include in response.\n\nFormat: `type1,type2,...`.\n\nDefault:`\"\"`","type":"string"},"steps":{"description":"enable to include `steps` in response.\n\nDefault: `false`","type":"boolean"},"truck_size":{"description":"Indicates the truck size in CM, only valid when mode=6w. \n\nFormat: `height,width,length`.","type":"string"},"truck_weight":{"description":"Indicates the truck weight including trailers and shipped goods in KG, only valid when mode=6w.","type":"integer","format":"int32"},"waypoints":{"description":"location(s) of waypoint(s) along the trip.\n\nFormat: `lat0,lng0|lat1,lng1|...`.\n\nRegex: (^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$)","type":"string"}},"required":["destination","origin"]},"DirectionsOutput":{"type":"object","properties":{"country_code":{"type":"string"},"errorMessage":{"description":"error message when `status` != `Ok`","type":"string"},"global_special_objects":{"description":"special geospatial objects found from all `routes`.\n\nNote: this is super collection of `special_objects` from individual `route`","type":"object"},"mode":{"description":"service mode used.\n\nValues:`4w|3w|2w...`.","type":"string"},"routes":{"description":"`routes` calculated.","type":"array","items":{"type":"object","properties":{"distance":{"description":"route driving distance.\n\nUnit: `meters`","type":"number","format":"double"},"distance_full":{"type":"number","format":"double"},"duration":{"description":"route driving duration.\n\nUnit: `seconds`","type":"number","format":"double"},"end_location":{"description":"end location of route","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"geojson":{"type":"object","properties":{"geometry":{"type":"string"},"properties":{"type":"string"},"type":{"type":"string","enum":["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","Link"]}},"required":["geometry","type"]},"geometry":{"description":"encoded geometry value in `polyline` or `polyline6`.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"string"},"geometry_full":{"description":"`Debug Only!` encoded geometry value in `polyline` or `polyline6`.\n\nNote: might contains `raw` geometry before filtering.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"string"},"legs":{"description":"legs of route.\n\nNote: `waypoints` split `route` into `legs`","type":"array","items":{"type":"object","properties":{"annotation":{"description":"`deprecated`","type":"object","properties":{"datasources":{"type":"array","items":{"type":"integer","format":"int32"}},"distance":{"type":"array","items":{"type":"number","format":"double"}},"duration":{"type":"array","items":{"type":"number","format":"double"}},"metadata":{"type":"object","properties":{"datasource_names":{"type":"array","items":{"type":"string"}}},"required":["datasource_names"]},"nodes":{"type":"array","items":{"type":"integer","format":"int64"}},"speed":{"type":"array","items":{"type":"number","format":"double"}},"turn_penalty":{"type":"array","items":{"type":"number","format":"double"}},"weight":{"type":"array","items":{"type":"number","format":"double"}}},"required":["datasources","distance","duration","nodes","speed","turn_penalty","weight"]},"distance":{"description":"leg driving distance.\n\nUnit: `meters`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"duration":{"description":"leg driving duration.\n\nUnit: `seconds`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"end_location":{"description":"end location of `leg`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"raw_duration":{"description":"leg driving duration before adjusting.\n\nNote: debug only.","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"start_location":{"description":"start location of `leg`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"steps":{"description":"`steps` of `leg`","type":"array","items":{"type":"object","properties":{"distance":{"description":"step driving distance.\n\nUnit: `meters`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"duration":{"description":"step driving duration.\n\nUnit: `seconds`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"end_location":{"description":"end location of `step`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"geojson":{"type":"object","properties":{"geometry":{"type":"string"},"properties":{"type":"string"},"type":{"type":"string","enum":["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","Link"]}},"required":["geometry","type"]},"geometry":{"description":"encoded geometry value for step in `polyline` or `polyline6`.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"string"},"intersections":{"description":"step intersections","type":"array","items":{"type":"object","properties":{"bearings":{"type":"array","items":{"type":"integer","format":"int32"}},"classes":{"type":"array","items":{"type":"string"}},"entry":{"type":"array","items":{"type":"boolean"}},"intersection_in":{"type":"integer","format":"int32"},"intersection_out":{"type":"integer","format":"int32"},"lanes":{"type":"array","items":{"type":"object","properties":{"indications":{"type":"array","items":{"type":"string"}},"valid":{"type":"boolean"}},"required":["indications","valid"]}},"location":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"},"name":{"type":"string"}},"required":["latitude","longitude"]}},"required":["bearings","classes","entry","intersection_in","intersection_out","lanes","location"]}},"maneuver":{"description":"step Maneuver","type":"object","properties":{"bearing_after":{"type":"integer","format":"int32"},"bearing_before":{"type":"integer","format":"int32"},"coordinate":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"},"name":{"type":"string"}},"required":["latitude","longitude"]},"instruction":{"type":"string"},"maneuver_type":{"type":"string"},"modifier":{"type":"string"},"muted":{"type":"boolean"},"roundabout_count":{"type":"integer","format":"int32"},"voice_instruction":{"type":"array","items":{"type":"object","properties":{"distance_along_geometry":{"type":"integer","format":"int32"},"instruction":{"type":"string"},"unit":{"type":"string"}},"required":["distance_along_geometry","instruction","unit"]}}},"required":["bearing_after","bearing_before","coordinate","maneuver_type","voice_instruction"]},"name":{"description":"step name","type":"string"},"reference":{"description":"step reference","type":"string"},"road_shield_type":{"description":"road shield info","type":"object","properties":{"image_url":{"description":"road shield image url","type":"string"},"label":{"description":"A Label identfying the inscription on the road shield, such as containing the road number.","type":"string"}}},"start_location":{"description":"start location of `step`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]}},"required":["distance","duration","end_location","start_location"]}}},"required":["distance","duration"]}},"predicted_duration":{"description":"route driving duration after adjusting.\n\nNote: debug only.","type":"number","format":"double"},"raw_duration":{"description":"route driving duration before adjusting.\n\nNote: debug only.","type":"number","format":"double"},"special_objects":{"description":"special geospatial objects crossed along the trip.","type":"object"},"start_location":{"description":"start location of route","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"weight":{"description":"route weight.","type":"number","format":"double"}},"required":["distance","duration"]}},"status":{"description":"`Ok` for success.","type":"string"}},"required":["routes","status"]},"ISOChroneValhallaOutput":{"type":"object","properties":{"features":{"type":"array","items":{"type":"object","properties":{"geometry":{"type":"object","properties":{"coordinates":{"type":"string"},"type":{"type":"string"}},"required":["coordinates","type"]},"properties":{"type":"object","properties":{"color":{"type":"string"},"contour":{"type":"number","format":"float"},"fill":{"type":"string"},"fillColor":{"type":"string"},"fillOpacity":{"type":"number","format":"float"},"metric":{"type":"string"},"opacity":{"type":"number","format":"float"}},"required":["color","contour","fill","fillColor","fillOpacity","metric","opacity"]},"type":{"type":"string"}},"required":["geometry","properties","type"]}},"type":{"type":"string"}},"required":["features","type"]},"MatrixConciseOutput":{"type":"object","properties":{"rows":{"description":"matrix output.\n\n\n|e00,d00|e01,d01|e02,d02...|\n\n|e10,d10|e11,d11|e12,d02...|\n\n|e20,d00|e21,d01|e22,d02...|\n\n...\n\nwhere:\n\ne(xy) eta for origins[x] to dest[y]\n\nd(xy) distance for origins[x] to dest[y]","type":"array","items":{"type":"array","items":{"type":"array","items":{"type":"integer","format":"int64"}}}},"status":{"description":"`Ok` for success.","type":"string"}},"required":["rows","status"]},"MatrixInput":{"type":"object","properties":{"approaches":{"type":"string"},"avoid":{"type":"string"},"bearings":{"description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","type":"string"},"context":{"description":"`deprecated`","type":"string"},"debug":{"description":"enable to show debug information.\n\nDefault: `false`","type":"boolean"},"departure_time":{"description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`","type":"integer","format":"int64"},"destinations":{"description":"locations of destinations\n\nFormat: lat0,lng0|lat1,lng1|...\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","type":"string"},"key":{"description":"apikey for authentication.\n\nDefault: `\"\"`","type":"string"},"mode":{"description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","type":"string"},"origins":{"description":"locations of origins \n\nFormat: lat0,lng0|lat1,lng1|...\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","type":"string"}},"required":["destinations","origins"]},"MatrixOutput":{"type":"object","properties":{"rows":{"description":"matrix output.\n\nNote: each row in following format\n\nRow[i]: `Element`(o[i]d[0]),`Element`(o[i]d[1]),`Element`(o[i]d[2])...","type":"array","items":{"type":"object","properties":{"elements":{"description":"`elements` for a particular row|origin","type":"array","items":{"type":"object","properties":{"distance":{"description":"traveling distance between origin and destination.\n\nUnit: `metres`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"duration":{"description":"traveling duration between origin and destination.\n\nUnit: `seconds`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"predicted_duration":{"description":"traveling duration after adjust.\n\nUnit: `seconds`\n\nNote: debug only","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"raw_duration":{"description":"traveling duration before adjust.\n\nUnit: `seconds`\n\nNote: debug only","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]}},"required":["distance","duration"]}}},"required":["elements"]}},"status":{"description":"`Ok` for success.","type":"string"}},"required":["rows","status"]},"NavigatingInput":{"type":"object","properties":{"altcount":{"description":"number of alternative routes to return.\n\nDefault: `1` if `alternatives` is disabled, `3` otherwise","type":"integer","format":"int32"},"alternatives":{"description":"enable to return alternative routes.\n\nNote: `altcount` will default to `3` if this is enabled.\n\nDefault: `false`","type":"boolean"},"approaches":{"type":"string"},"avoid":{"description":"Indicates that the calculated route(s) should avoid the indicated features. \n\nFormat: `value1|value2|...`. Default:`\"\"`","type":"string"},"bearings":{"description":"Limits the search to segments with given bearing in degrees towards true north in clockwise direction. \n\nFormat: `degree,range;degree,range...`. Default:`\"\"`","type":"string"},"context":{"description":"departure time.\n\nFormat: `unix timestamp`.\n\nUnit: `seconds`.\n\nDefault: `0`\n`deprecated`","type":"string"},"debug":{"description":"enable to show debug information.\n\nDefault: `false`","type":"boolean"},"departure_time":{"type":"integer","format":"int64"},"destination":{"description":"location of destination.\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","type":"string"},"geometry":{"description":"geometry input, if this is given, other params will not be considered except `geometry_type` & `lang` & `key`.","type":"string"},"geometry_type":{"description":"format of geometry.\n\nDefault: `polyline6`","type":"string"},"key":{"description":"apikey for authentication.\n\nDefault: `\"\"`","type":"string"},"lang":{"description":"language of the text instruction","type":"string"},"mode":{"description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: `\"\"`","type":"string"},"origin":{"description":"{{location_of_origin}}\n\nFormat: `lat,lng`.\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+$","type":"string"},"overview":{"description":"output verbosity of overview (whole trip) geometry.\n\nDefault: `full`","type":"string","enum":["full","simplified","false"]},"route_type":{"description":"using shortest route when route_type=shortest.","type":"string"},"session":{"description":"unique session id for trip identification.\n\nNote: Help to reuse cached trip characteritics when set. \n\nDefault: `\"\"`","type":"string"},"waypoints":{"description":"location(s) of waypoint(s) along the trip.\n\nFormat: `lat0,lng0|lat1,lng1|...`.\n\nRegex: (^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$)","type":"string"}}},"NavigatingOutput":{"type":"object","properties":{"country_code":{"type":"string"},"error_msg":{"description":"error message when `status` != `Ok`","type":"string"},"routes":{"description":"`routes` calculated.","type":"array","items":{"type":"object","properties":{"distance":{"description":"route driving distance.\n\nUnit: `meters`","type":"number","format":"double"},"distance_full":{"type":"number","format":"double"},"duration":{"description":"route driving duration.\n\nUnit: `seconds`","type":"number","format":"double"},"end_location":{"description":"end location of route","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"geojson":{"type":"object","properties":{"geometry":{"type":"string"},"properties":{"type":"string"},"type":{"type":"string","enum":["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","Link"]}},"required":["geometry","type"]},"geometry":{"description":"encoded geometry value in `polyline` or `polyline6`.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"string"},"geometry_full":{"description":"`Debug Only!` encoded geometry value in `polyline` or `polyline6`.\n\nNote: might contains `raw` geometry before filtering.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"string"},"legs":{"description":"legs of route.\n\nNote: `waypoints` split `route` into `legs`","type":"array","items":{"type":"object","properties":{"annotation":{"description":"`deprecated`","type":"object","properties":{"datasources":{"type":"array","items":{"type":"integer","format":"int32"}},"distance":{"type":"array","items":{"type":"number","format":"double"}},"duration":{"type":"array","items":{"type":"number","format":"double"}},"metadata":{"type":"object","properties":{"datasource_names":{"type":"array","items":{"type":"string"}}},"required":["datasource_names"]},"nodes":{"type":"array","items":{"type":"integer","format":"int64"}},"speed":{"type":"array","items":{"type":"number","format":"double"}},"turn_penalty":{"type":"array","items":{"type":"number","format":"double"}},"weight":{"type":"array","items":{"type":"number","format":"double"}}},"required":["datasources","distance","duration","nodes","speed","turn_penalty","weight"]},"distance":{"description":"leg driving distance.\n\nUnit: `meters`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"duration":{"description":"leg driving duration.\n\nUnit: `seconds`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"end_location":{"description":"end location of `leg`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"raw_duration":{"description":"leg driving duration before adjusting.\n\nNote: debug only.","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"start_location":{"description":"start location of `leg`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"steps":{"description":"`steps` of `leg`","type":"array","items":{"type":"object","properties":{"distance":{"description":"step driving distance.\n\nUnit: `meters`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"duration":{"description":"step driving duration.\n\nUnit: `seconds`","type":"object","properties":{"value":{"type":"integer","format":"int64"}},"required":["value"]},"end_location":{"description":"end location of `step`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"geojson":{"type":"object","properties":{"geometry":{"type":"string"},"properties":{"type":"string"},"type":{"type":"string","enum":["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","Link"]}},"required":["geometry","type"]},"geometry":{"description":"encoded geometry value for step in `polyline` or `polyline6`.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"string"},"intersections":{"description":"step intersections","type":"array","items":{"type":"object","properties":{"bearings":{"type":"array","items":{"type":"integer","format":"int32"}},"classes":{"type":"array","items":{"type":"string"}},"entry":{"type":"array","items":{"type":"boolean"}},"intersection_in":{"type":"integer","format":"int32"},"intersection_out":{"type":"integer","format":"int32"},"lanes":{"type":"array","items":{"type":"object","properties":{"indications":{"type":"array","items":{"type":"string"}},"valid":{"type":"boolean"}},"required":["indications","valid"]}},"location":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"},"name":{"type":"string"}},"required":["latitude","longitude"]}},"required":["bearings","classes","entry","intersection_in","intersection_out","lanes","location"]}},"maneuver":{"description":"step Maneuver","type":"object","properties":{"bearing_after":{"type":"integer","format":"int32"},"bearing_before":{"type":"integer","format":"int32"},"coordinate":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"},"name":{"type":"string"}},"required":["latitude","longitude"]},"instruction":{"type":"string"},"maneuver_type":{"type":"string"},"modifier":{"type":"string"},"muted":{"type":"boolean"},"roundabout_count":{"type":"integer","format":"int32"},"voice_instruction":{"type":"array","items":{"type":"object","properties":{"distance_along_geometry":{"type":"integer","format":"int32"},"instruction":{"type":"string"},"unit":{"type":"string"}},"required":["distance_along_geometry","instruction","unit"]}}},"required":["bearing_after","bearing_before","coordinate","maneuver_type","voice_instruction"]},"name":{"description":"step name","type":"string"},"reference":{"description":"step reference","type":"string"},"road_shield_type":{"description":"road shield info","type":"object","properties":{"image_url":{"description":"road shield image url","type":"string"},"label":{"description":"A Label identfying the inscription on the road shield, such as containing the road number.","type":"string"}}},"start_location":{"description":"start location of `step`","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]}},"required":["distance","duration","end_location","start_location"]}}},"required":["distance","duration"]}},"predicted_duration":{"description":"route driving duration after adjusting.\n\nNote: debug only.","type":"number","format":"double"},"raw_duration":{"description":"route driving duration before adjusting.\n\nNote: debug only.","type":"number","format":"double"},"special_objects":{"description":"special geospatial objects crossed along the trip.","type":"object"},"start_location":{"description":"start location of route","type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"weight":{"description":"route weight.","type":"number","format":"double"}},"required":["distance","duration"]}},"status":{"description":"`Ok` for success.","type":"string"}},"required":["routes","status"]},"NavigatingProctorOutput":{"type":"object","properties":{"country_code":{"type":"string"},"error_msg":{"description":"error message when `status` != `Ok`","type":"string"},"instruction_fork_bearing_lower_bound":{"description":"`the value of the share.config.instruction_fork_bearing_lower_bound","type":"integer","format":"int32"},"navigating_res":{"description":"the json result send to Proctor.","type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"routes":{"type":"array","items":{"type":"object","properties":{"distance":{"type":"number","format":"double"},"duration":{"type":"number","format":"double"},"geometry":{"type":"string"},"legs":{"type":"array","items":{"type":"object","properties":{"annotation":{"type":"object","properties":{"datasources":{"type":"array","items":{"type":"integer","format":"int32"}},"distance":{"type":"array","items":{"type":"number","format":"double"}},"duration":{"type":"array","items":{"type":"number","format":"double"}},"metadata":{"type":"object","properties":{"datasource_names":{"type":"array","items":{"type":"string"}}},"required":["datasource_names"]},"nodes":{"type":"array","items":{"type":"integer","format":"int64"}},"speed":{"type":"array","items":{"type":"number","format":"double"}},"turn_penalty":{"type":"array","items":{"type":"number","format":"double"}},"weight":{"type":"array","items":{"type":"number","format":"double"}}},"required":["datasources","distance","duration","nodes","speed","turn_penalty","weight"]},"distance":{"type":"number","format":"double"},"duration":{"type":"number","format":"double"},"steps":{"type":"array","items":{"type":"object","properties":{"destinations":{"type":"string"},"distance":{"type":"number","format":"double"},"driving_side":{"type":"string"},"duration":{"type":"number","format":"double"},"exits":{"type":"string"},"geometry":{"type":"string"},"intersections":{"type":"array","items":{"type":"object","properties":{"bearings":{"type":"array","items":{"type":"integer","format":"int32"}},"classes":{"type":"array","items":{"type":"string"}},"entry":{"type":"array","items":{"type":"boolean"}},"intersection_in":{"type":"integer","format":"int32"},"intersection_out":{"type":"integer","format":"int32"},"lanes":{"type":"array","items":{"type":"object","properties":{"indications":{"type":"array","items":{"type":"string"}},"valid":{"type":"boolean"}},"required":["indications","valid"]}},"location":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"},"name":{"type":"string"}},"required":["latitude","longitude"]}},"required":["bearings","classes","entry","intersection_in","intersection_out","lanes","location"]}},"metadata":{"type":"object","properties":{"bearing_after":{"type":"integer","format":"int32"},"bearing_before":{"type":"integer","format":"int32"},"coordinate":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"},"name":{"type":"string"}},"required":["latitude","longitude"]},"exit":{"type":"integer","format":"int32"},"maneuver_type":{"type":"string"},"modifier":{"type":"string"}},"required":["bearing_after","bearing_before","coordinate","exit","maneuver_type"]},"mode":{"type":"string"},"name":{"type":"string"},"pronunciation":{"type":"string"},"reference":{"type":"string"},"rotary_name":{"type":"string"},"rotary_pronunciation":{"type":"string"},"weight":{"type":"number","format":"double"}},"required":["distance","duration","intersections","weight"]}},"summary":{"type":"string"},"weight":{"type":"number","format":"double"}},"required":["distance","duration","steps","weight"]}},"weight":{"type":"number","format":"double"},"weight_name":{"type":"string"}},"required":["distance","duration","legs"]}}},"required":["routes"]},"status":{"description":"`Ok` for success.","type":"string"},"voice_instruction_advance_distance":{"description":"`the value of the share.config.voice_instuction_advance_distance","type":"integer","format":"int32"}},"required":["navigating_res","status"]},"OptimizationOutput":{"type":"object","properties":{"code":{"description":"`Ok` for success.","type":"string"},"trips":{"description":"An array of 0 or 1 trip objects.","type":"array","items":{"type":"object","properties":{"distance":{"type":"number","format":"double"},"duration":{"type":"number","format":"double"},"geojson":{"type":"object","properties":{"geometry":{"type":"string"},"properties":{"type":"string"},"type":{"type":"string","enum":["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","Link"]}},"required":["geometry","type"]},"geometry":{"type":"string"},"legs":{"type":"array","items":{"type":"object","properties":{"distance":{"type":"number","format":"double"},"duration":{"type":"number","format":"double"},"steps":{"type":"array","items":{"type":"object","properties":{"distance":{"type":"number","format":"double"},"duration":{"type":"number","format":"double"},"geojson":{"type":"object","properties":{"geometry":{"type":"string"},"properties":{"type":"string"},"type":{"type":"string","enum":["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","Link"]}},"required":["geometry","type"]},"geometry":{"type":"string"}},"required":["distance","duration","geometry"]}},"summary":{"description":"summary for this leg","type":"string"}},"required":["distance","duration","steps","summary"]}}},"required":["distance","duration","geometry","legs"]}},"waypoints":{"description":"Each waypoint is an input coordinate snapped to the road and path network.","type":"array","items":{"type":"object","properties":{"location":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"name":{"type":"string"},"trips_index":{"type":"integer","format":"int64"},"waypoint_index":{"type":"integer","format":"int64"}},"required":["location","name","trips_index","waypoint_index"]}}},"required":["code","trips","waypoints"]},"PostTripRouteInput":{"type":"object","properties":{"context":{"description":"`deprecated`","type":"string"},"debug":{"description":"enable to show debug information.\n\nDefault: `false`","type":"boolean"},"key":{"description":"apikey for authentication.\n\nDefault: `\"\"`","type":"string"},"mode":{"description":"mode of service.\n\nValues:`car|auto|bike|escooter|4w|2w...`.\n\nDefault: \"\"","type":"string"},"special_object_types":{"description":"special geospatial objects to include in response.\n\nDefault: `[\"traffic_signals\"]`","type":"array","items":{"type":"string"}},"timestamps":{"description":"unix timestamp of each `waypoints`.\n\nUnit: `seconds`\n\nFormat: `ts0|ts1|...`\n\nRegex: ^[\\d]+(\\|[\\d]+)*$","type":"string"},"tolerate_outlier":{"description":"enable to ignore location not found in service boundary.\n\nNote: enable this to ignore outliers, otherwise an error will be thrown.\n\nDefault: `false`","type":"boolean"},"waypoints":{"description":"location(s) of waypoint(s) along the trip.\n\nFormat:`lat0,lng0|lat1,lng1|...`\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","type":"string"}},"required":["waypoints"]},"PostTripRouteOutput":{"type":"object","properties":{"errorMessage":{"description":"error message when `status` != `Ok`","type":"string"},"mode":{"description":"service mode used.\n\nValues:`4w|3w|2w...`.","type":"string"},"route":{"description":"`route` calculated.","type":"object","properties":{"distance":{"description":"trip driving distance.\n\nUnit: `meters`","type":"number","format":"double"},"geometry":{"description":"encoded geometry value in `polyline` or `polyline6`.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"string"},"special_objects":{"description":"special geospatial objects crossed along the trip.","type":"object"}},"required":["distance","geometry"]},"status":{"description":"`Ok` for success.","type":"string"}},"required":["status"]},"SnapInput":{"type":"object","properties":{"approaches":{"type":"string"},"avoid":{"type":"string"},"context":{"description":"`deprecated`","type":"string"},"geometry":{"description":"only supports for polyline and geojson","type":"string"},"interpolate":{"description":"enable to interpolate the path.\n\nNote: might return more points\n\nDefault: `false`","type":"boolean"},"key":{"description":"apikey for authentication.\n\nDefault: `\"\"`","type":"string"},"mode":{"type":"string"},"path":{"description":"`locations` to perform `snap2roads`\n\nFormat: `lat0,lng0|lat1,lng1|...`\n\nRegex: ^[\\d\\.\\-]+,[\\d\\.\\-]+(\\|[\\d\\.\\-]+,[\\d\\.\\-]+)*$","type":"string"},"radiuses":{"description":"radiuses of each `location` for performing `snap2road`\n\nUnit: `meters`\n\nFormat: `radius0|radius1|...`\n\nRegex: ^[\\d]+(\\|[\\d]+)*$","type":"string"},"timestamps":{"description":"unix timestamps for each `location`. Need to be monotonically increasing.\n\nUnit: `seconds`\n\nFormat: ts0|ts1|...\n\nRegex: ^[\\d]+(\\|[\\d]+)*$","type":"string"},"tolerate_outlier":{"description":"enable to ignore location not found in service boundary.\n\nNote: enable this to ignore outliers, otherwise an error will be thrown.\n\nDefault: `false`","type":"boolean"}},"required":["path"]},"SnapOutput":{"type":"object","properties":{"distance":{"description":"total travel distance of the snapped path\n\nUnit: `meters`","type":"integer","format":"int64"},"geojson":{"type":"object","properties":{"geometry":{"type":"string"},"properties":{"type":"string"},"type":{"type":"string","enum":["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","Link"]}},"required":["geometry","type"]},"geometry":{"description":"encoded geometry value in `polyline` or `polyline6`.\n\nFormat: [Link: Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)","type":"array","items":{"type":"string"}},"snappedPoints":{"type":"array","items":{"type":"object","properties":{"bearing":{"description":"bearing angle of the snapped point.\n\nUnit: `radian`","type":"number","format":"double"},"distance":{"description":"distance of the snapped point from the original\n\nUnit: `meters`","type":"number","format":"double"},"location":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"}},"required":["latitude","longitude"]},"name":{"description":"name of the street the coordinate snapped to","type":"string"},"originalIndex":{"description":"index of original input array","type":"integer","format":"int64"}},"required":["bearing","distance","location","name","originalIndex"]}},"status":{"description":"`Ok` for success.","type":"string"}},"required":["distance","snappedPoints","status"]}}},"tags":[{"name":"Auth","description":"pass `apikey` as url query string parameter `key`"}]}